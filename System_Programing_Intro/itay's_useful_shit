*** READ ME ***

This file is essentially a list of useful things such as-
methods \ libraries \ algorithms and other things with explanations.


! DECLARATIONS & LIBRARIES !
------------------------------------------------------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <time.h>

#define _CRT_SECURE_NO_WARNINGS
#define NAME NUM
------------------------------------------------------------------------------------------------------------------------


! OPERATORS !
------------------------------------------------------------------------------------------------------------------------

! MEMORY MANAGEMENT !
------------------------------------------------------------------------------------------------------------------------
sizeof()  - Returns the byte size of any expression.
            Example: `int size = sizeof(int);`

malloc()  - Allocates a specified amount of memory dynamically.
            Example: `int *ptr = malloc(5 * sizeof(int));`

calloc()  - Allocates and initializes an array dynamically.
            Example: `int *ptr = calloc(5, sizeof(int));`

realloc() - Resizes previously allocated memory.
              Example: `ptr = realloc(ptr, 10 * sizeof(int));`

free()    - Frees previously allocated memory.
            Example: `free(ptr);`

------------------------------------------------------------------------------------------------------------------------

! INPUT / OUTPUT !
------------------------------------------------------------------------------------------------------------------------
getchar() - Reads a single character from standard input.
            Example: `char c = getchar();`

putchar() - Writes a single character to standard output.
            Example: `putchar('A');`

scanf()   - Reads formatted input from standard input.
            Example: `int num; scanf("%d", &num);`

printf()  - Prints formatted output to standard output.
            Example: `printf("Number: %d", num);`

fgets()   - Reads a string from standard input with buffer size control.
            Example: `char str[20]; fgets(str, 20, stdin);`

puts()    - Writes a string to standard output, adding a newline.
            Example: `puts("Hello, world!");`

------------------------------------------------------------------------------------------------------------------------

! STRING HANDLING !
------------------------------------------------------------------------------------------------------------------------
strlen() - Returns the length of a string.
           Example: `int len = strlen("Hello");`

strcpy() - Copies a string into another.
           Example: `char dest[20]; strcpy(dest, "Copy this");`

strcat() - Concatenates two strings.
           Example: `char str1[20] = "Hello "; strcat(str1, "World");`

strcmp() - Compares two strings lexicographically.
           Example: `if (strcmp("apple", "banana") < 0) { puts("Apple comes first"); }`

strstr() - Finds a substring within a string.
           Example: `char *ptr = strstr("Hello World", "World");`

strchr() - Finds a character within a string.
           Example: `char *ptr = strchr("Hello", 'e');`
------------------------------------------------------------------------------------------------------------------------


! VARIABLE TYPES !
---------------------------------------------------------------------------------------------------------------------------------------------------
Type Name          |    Code                   |    Byte(s)    |    Definition                          |    Range of Numbers
___________________________________________________________________________________________________________________________________________________
char               |    %c                     |    1          |    Character type                      |    -128 to 127
unsigned char      |    %c                     |    1          |    Unsigned character type             |    0 to 255
short              |    %hd                    |    2          |    Short integer                       |    -32,768 to 32,767
unsigned short     |    %hu                    |    2          |    Unsigned short integer              |    0 to 65,535
int                |    %d / %o / %x / %X      |    4          |    Standard integer                    |    -2,147,483,648 to 2,147,483,647
unsigned int       |    %u / %o / %x / %X      |    4          |    Unsigned integer                    |    0 to 4,294,967,295
long               |    %ld                    |    4 or 8     |    Long integer                        |    Depends on system
unsigned long      |    %lu                    |    4 or 8     |    Unsigned long integer               |    Depends on system
float              |    %f                     |    4          |    Floating-point number               |    ~3.4E-38 to 3.4E+38
double             |    %lf                    |    8          |    Double floating-point number        |    ~1.7E-308 to 1.7E+308
long double        |    %Lf                    |    8 or 16    |    Extended precision floating-point   |    Larger range depending on architecture
char pointer       |    %s                     |    8          |    Pointer to character string         |    N/A (points to memory location)
---------------------------------------------------------------------------------------------------------------------------------------------------


! PROGRAMMING FUNDAMENTALS !
------------------------------------------------------------------------------------------------------------------------
if -               Executes code if a condition is true.
                   Example: `if (x > 0) { printf("Positive"); }`

if else -          Adds an alternative block when the condition is false.
                   Example: `if (x > 0) { printf("Positive"); } else { printf("Negative"); }`

switch -           Selects from multiple cases based on a value.
                   Example:  `switch (ch) {
                                 case 'y': case 'Y':
                                     printf("Yes");
                                     break;
                                 default:
                                     printf("No"); }`

while -            Loops while a condition is true.
                   Example: `while (x < 10) { x++; }`

do while -         Executes the loop body at least once, then repeats while a condition is true.
                   Example: `do { x++; } while (x < 10);`

for -              Loops a fixed number of times.
                   Example: `for (int i = 0; i < 5; i++) { printf("%d", i); }`

                   A for loop can also go in reverse.
                   Example: `for (int i = 5; i > 0; i--) { printf("%d", i); }`

casting -          Converts one data type into another, either implicitly or explicitly.
                   Example: `float f = (float)5 / 2;`

function -         Defines reusable code.
                   Example: `int add(int a, int b) { return a + b; }`

ternary operator - Shorthand for `if-else` using `?` and `:`.
                   Example: `(age >= 18) ? printf("Adult") : printf("Minor");`

------------------------------------------------------------------------------------------------------------------------


! POINTERS & MEMORY MANAGEMENT !
------------------------------------------------------------------------------------------------------------------------
pointer (*) -         Stores the memory address of a variable, allowing indirect access to its value.
                      Example: `int x = 10; int *ptr = &x;` (ptr now holds the address of x)
                      Dereferencing with `*ptr` retrieves the value at the address (e.g., 10).

ampersand (&) -       Used to obtain the memory address of a variable, often for initializing pointers.
                      Example: `ptr = &x;` (retrieves x’s address and assigns it to ptr)

double pointer (**) - A pointer that stores the address of another pointer.
                      Example: `int **dblPtr = &ptr;` (dblPtr holds the address of ptr, which holds x’s address)

NULL -                Represents an empty or invalid pointer, preventing it from pointing to unintended memory.
                      Example: `ptr = NULL;` (ptr now doesn’t point to any valid memory location)
                      Defined in `<stdio.h>` and equivalent to `0` in pointer contexts.

------------------------------------------------------------------------------------------------------------------------


! ARRAYS & STRINGS !
------------------------------------------------------------------------------------------------------------------------
array -            A collection of variables stored in contiguous memory, accessed using an index.
                   Example: `int arr[5] = {1, 2, 3, 4, 5};
                             char str1[] = {'H', 'e', 'l', 'l', 'o', '\0'};
                             char str2[10] = "Hello";
                             char str3[] = "Hello";`
                   Also,    `arr[0]` is equivalent to `*(arr + 0)`, where it points to the first element.

string -           An array of characters terminated by a null character (`\0`).
                   Example: `char str[] = "Hello";`

matrix array -     A nested array structure storing data in rows and columns.
                   Example: `int matrix[2][3] = {{1, 2, 3}, {4, 5, 6}};`

null termination - The special `'\0'` character marking the end of a string in memory.
                   Example: `char str[] = {'H', 'e', 'l', 'l', 'o', '\0'};`
------------------------------------------------------------------------------------------------------------------------


! STRUCTURES !
------------------------------------------------------------------------------------------------------------------------
structure -     A user-defined variable type that groups multiple variables under one name.
                Unlike arrays, a structure can hold multiple data types, and members are accessed by name (not index).
                Example: `struct Person {
                             char name[10];
                             int age;
                             char address[20];
                         };`

declaration -   Once defined, you can create variables or pointers to the structure type.
                Example: `struct Person x; struct Person *y;`

access -        Use dot `.` to access members:        `x.age = 30;`
                Use arrow `->` with pointers:         `y->age = 30;`

typedef -       Used to avoid repeating `struct` keyword on every declaration.
                Example: `typedef struct {
                             char name[10];
                             int age;
                             char address[20];
                         } Person;
                         Person moshe; Person *kid;`

assignment -    You can copy the contents of one struct into another directly.
                Example: `Person a = {"A", 20, "X"}; Person b = a;`

functions -     Passing structs to functions makes a copy (changes don’t persist).
                To modify, pass a pointer instead: `void update(Person *p) { p->age = 25; }`
------------------------------------------------------------------------------------------------------------------------


! FILES !
------------------------------------------------------------------------------------------------------------------------
formats -       Two file formats exist:
                1. Text   – Stored in ASCII character form.
                2. Binary – Stored as raw memory bytes.

fopen() -       opens a file and returns a FILE pointer.
                Always check if the result is NULL.
                Example: `FILE *f = fopen("data.txt", "rt");`
                Modes: "r", "w", "a", "r+", "w+" + 't' or 'b' for text/binary.

mode meanings - "r"   – Read only        (fails if file doesn't exist)
                "w"   – Write only       (clears file if exists)
                "a"   – Append only      (writes to end of file)
                "r+"  – Read/write       (file must exist)
                "w+"  – Write/read       (clears file)

fclose() -      closes a file.
                Example: `fclose(f);`
                exit() auto-closes all files.

fgetc() -       Reads a single character from file.
                Example: `char c = fgetc(f);`

fputc() -       Writes a single character to file.
                Example: `fputc('A', f);`

fgets() -       Reads a string from file with buffer size.
                Example: `char str[20]; fgets(str, 20, f);`

fputs() -       Writes a string to file.
                Example: `fputs("Hello", f);`

fscanf() -      Reads formatted input from file.
                Example: `fscanf(f, "%d %s", &x, str);`

fprintf() -     Writes formatted output to file.
                Example: `fprintf(f, "%d %s", x, str);`

feof() -        Checks if end-of-file has been reached.
                Example: `while (!feof(f)) { ... }`

EOF -           A constant (-1) used to mark end of file.
                Example: `while ((c = fgetc(f)) != EOF) { ... }`

fseek() -       Moves file pointer to a specific location.
                Example: `fseek(f, 0, SEEK_END);`

                Origin values:
                SEEK_SET / 0 - beginning
                SEEK_CUR / 1 - current
                SEEK_END / 2 - end

ftell() -       Returns current byte offset in file.
                Example: `int pos = ftell(f);`

rewind() -      Resets file pointer to the beginning.
                Example: `rewind(f);`

remove() -      Deletes a file.
                Example: `remove("file.txt");`

rename() -      Renames a file.
                Example: `rename("old.txt", "new.txt");`

stdin / stdout /
stderr -        Standard input/output/error streams.
                Used by functions like printf, scanf, getchar, etc.

atoi() -        Converts string to int (from <stdlib.h>).
                Example: `char *s = "123"; int x = atoi(s);`

------------------------------------------------------------------------------------------------------------------------


! ASCII TABLE !
------------------------------------------------------------------------------------------------------------------------
Char  |  Decimal  |  Char  |  Decimal  |  Char  |  Decimal
________________________________________________________________________________________________________________________
A     |    65     |  J     |    74     |  S     |    83
B     |    66     |  K     |    75     |  T     |    84
C     |    67     |  L     |    76     |  U     |    85
D     |    68     |  M     |    77     |  V     |    86
E     |    69     |  N     |    78     |  W     |    87
F     |    70     |  O     |    79     |  X     |    88
G     |    71     |  P     |    80     |  Y     |    89
H     |    72     |  Q     |    81     |  Z     |    90
I     |    73     |  R     |    82     |        |
------------------------------------------------------------------------------------------------------------------------
a     |    97     |  j     |   106     |  s     |   115
b     |    98     |  k     |   107     |  t     |   116
c     |    99     |  l     |   108     |  u     |   117
d     |   100     |  m     |   109     |  v     |   118
e     |   101     |  n     |   110     |  w     |   119
f     |   102     |  o     |   111     |  x     |   120
g     |   103     |  p     |   112     |  y     |   121
h     |   104     |  q     |   113     |  z     |   122
i     |   105     |  r     |   114     |        |
------------------------------------------------------------------------------------------------------------------------


! GLOBAL & STATIC VARIABLES !
------------------------------------------------------------------------------------------------------------------------
global variable - A variable declared outside of any function, making it accessible throughout the entire program.
                  Example: `int globalVar = 10;`

static variable - A variable that retains its value across multiple function calls and is restricted to its scope.
                  Example: `static int counter = 0;`
------------------------------------------------------------------------------------------------------------------------

! ALGORITHMS !
------------------------------------------------------------------------------------------------------------------------
TBD
------------------------------------------------------------------------------------------------------------------------
